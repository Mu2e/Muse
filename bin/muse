#! /bin/bash
#
# script to drive the muse command to setup and build Mu2e analysis repos
#

museUsage() {

    cat << EOF

   System to build multiple Mu2e repos in one scons command

   muse <global options> action <action options>

   global options:
     -v add verbosity
     -h print help

    action:
       status    - print status of setup
       list      - print information about published Muse builds
       setup     - setup UPS products and path
       build     - run scons code build
       backing   - create a link to a backing build in another area
       tarball   - tar up build for grid or a release

   To see each actions options, add "-h" to the action

EOF

}

#
# this script can be sourced (for setup)
# or executed, which is necessary for IDE's
# decide here if we need to return or exit
#
if [ "$(basename $0 2>/dev/null)" = "muse" ];then
    #exe mode
    DONE=exit
else
    #source mode
    DONE=return
fi

#
# checks
#
if [ -z "$MU2E" ]; then
    echo "ERROR - muse was not setup"
    $DONE 1
fi


#
# parse arguments
#

# first arg might be verbose flag

export MUSE_VERBOSE=0
if [[ "$1" == "-v" || "$1" == "--verbose" ]]; then
    export MUSE_VERBOSE=1
    shift
fi

if [[ "$1" == "help" || "$1" == "-h" || "$1" == "--help" ]]; then
    museUsage
    $DONE 0
fi


COMMAND=$1
shift
if [ -z "$COMMAND" ]; then
    echo "ERROR - no muse command word"
    $DONE 1
fi


if [ "$COMMAND" == "setup" ]; then

    OWD=$PWD
    source museSetup.sh "$@"
    RC=$?

    cd $OWD
    $DONE $RC

elif [ "$COMMAND" == "status" ]; then

    $MUSE_DIR/bin/museStatus.sh "$@"
    $DONE $?

elif [ "$COMMAND" == "backing" ]; then

    # this command must be run in the working dir
    $MUSE_DIR/bin/museBacking.sh "$@"
    $DONE $?

elif [ "$COMMAND" == "list" ]; then

    $MUSE_DIR/bin/museList.sh "$@"
    $DONE $?

fi

if [ -z "$MUSE_WORK_DIR" ]; then
    echo "ERROR - MUSE_WORK_DIR not set - \"muse setup\" must be run first"
    $DONE 1
fi

if [ "$COMMAND" == "build" ]; then

    $MUSE_DIR/bin/museBuild.sh "$@"
    RC=$?

elif [ "$COMMAND" == "tarball" ]; then

    $MUSE_DIR/bin/museTarball.sh "$@"
    RC=$?

else
    echo "ERROR - unknown command  $COMMAND"
    $DONE 1
fi

$DONE $RC
